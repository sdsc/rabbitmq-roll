<?xml version="1.0" standalone="no"?>

<kickstart>


	<description>
	Your rabbitmq roll description here
	</description>

	<copyright>
	Copyright (c) 2000 - 2017 The Regents of the University of California.
	All rights reserved. Rocks(r) v6.2/v7.0 www.rocksclusters.org
	
	</copyright>

	<changelog>
	$Log$
	</changelog>

	<package>rabbitmq-server</package>



<post>
RABBITMQ_UID=<eval>/usr/bin/getent passwd rabbitmq 2&gt;&amp;1 &gt; /dev/null &amp;&amp; /usr/bin/id -u rabbitmq</eval>
RABBITMQ_GID=<eval>/usr/bin/getent group rabbitmq 2&gt;&amp;1 &gt; /dev/null &amp;&amp; /usr/bin/id -g rabbitmq</eval>

### If the above evals are empty, then rabbitmq wasn't a user when
### kickstart was created.  Read again from the environment
if [ "x$RABBITMQ_UID" == "x" ]; then
	RABBITMQ_UID=$(/usr/bin/getent passwd rabbitmq 2&gt;&amp;1 &gt; /dev/null &amp;&amp; /usr/bin/id -u rabbitmq)
fi
if [ "x$RABBITMQ_GID" == "x" ]; then
	RABBITMQ_GID=$(/usr/bin/getent group rabbitmq 2&gt;&amp;1 &gt; /dev/null &amp;&amp; /usr/bin/id -g rabbitmq)
fi

# rabbitmq UID|GID were created during install of the rabbitmq RPM
# we must set these to the same value as on the frontend so we don't
# loose our minds.
/usr/sbin/groupmod -g $RABBITMQ_GID rabbitmq
/usr/sbin/usermod -c "RABBITMQ service" \
  -d "/var/lib/rabbitmq" -g rabbitmq -s /bin/bash \
      -u $RABBITMQ_UID rabbitmq

/usr/bin/getent group rabbitmq &gt;/dev/null 2&gt;&amp;1 || \
    /usr/sbin/groupadd -g $RABBITMQ_GID rabbitmq
/usr/bin/getent passwd rabbitmq &gt;/dev/null 2&gt;&amp;1 || \
    /usr/sbin/useradd -c "RabbitMQ service" \
        -d "/var/lib/rabbitmq" -g rabbitmq -s /bin/false -u -g $RABBITMQ_UID rabbitmq



/bin/chown rabbitmq:rabbitmq /var/log/rabbitmq -R
/bin/chown rabbitmq:rabbitmq /var/lib/rabbitmq -R

mkdir -p /etc/ssl/rabbitmq

<file name="/etc/rabbitmq/rabbitmq.config" perms="644">
[
  {rabbit, [
     {ssl_listeners, [5671]},
     {ssl_options, [{cacertfile,"/etc/ssl/rabbitmq/cacert.pem"},
                    {certfile,"/etc/ssl/rabbitmq/cert.pem"},
                    {keyfile,"/etc/ssl/rabbitmq/key.pem"},
                    {verify,verify_peer},
                    {fail_if_no_peer_cert,false}]}
   ]}
]. 
</file>

<file name="/etc/ssl/rabbitmq/openssl.cnf" perms="600">
[ ca ]
default_ca = testca

[ testca ]
dir = .
certificate = $dir/cacert.pem
database = $dir/index.txt
new_certs_dir = $dir/certs
private_key = $dir/private/cakey.pem
serial = $dir/serial

default_crl_days = 7
default_days = 3650
default_md = sha1

policy = testca_policy
x509_extensions = certificate_extensions

[ testca_policy ]
commonName = supplied
stateOrProvinceName = optional
countryName = optional
emailAddress = optional
organizationName = optional
organizationalUnitName = optional

[ certificate_extensions ]
basicConstraints = CA:false

[ req ]
default_bits = 2048
default_keyfile = ./private/cakey.pem
default_md = sha1
prompt = yes
distinguished_name = root_ca_distinguished_name
x509_extensions = root_ca_extensions

[ root_ca_distinguished_name ]
commonName = hostname

[ root_ca_extensions ]
basicConstraints = CA:true
keyUsage = keyCertSign, cRLSign

[ client_ca_extensions ]
basicConstraints = CA:false
keyUsage = digitalSignature
extendedKeyUsage = 1.3.6.1.5.5.7.3.2

[ server_ca_extensions ]
basicConstraints = CA:false
keyUsage = keyEncipherment
extendedKeyUsage = 1.3.6.1.5.5.7.3.1
</file>

        cd /etc/ssl/rabbitmq
        /usr/bin/openssl req -x509 -config /etc/ssl/rabbitmq/openssl.cnf -newkey rsa:2048 -days 3650 \
            -out cacert.pem -keyout cakey.pem -outform PEM -subj /CN=MyCA/ -nodes
        /usr/bin/openssl req -newkey rsa:2048 -keyout key.pem -nodes -x509 -days 3650 -out cert.pem \
            -subj "/C=US/ST=CA/L=San Diego/O=UCSD/OU=SDSC/CN=&Kickstart_PublicHostname;"
        /bin/chmod 770 /etc/ssl/rabbitmq
        /bin/chmod 660 /etc/ssl/rabbitmq/*
        /bin/chown rabbitmq:rabbitmq /etc/ssl/rabbitmq -R

        /sbin/chkconfig rabbitmq-server on
        /usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management --offline

        # start the server and set up user credential
        /sbin/service rabbitmq-server start
        admin_pass=$(&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c26)
        /usr/sbin/rabbitmqctl delete_vhost /
        /usr/sbin/rabbitmqctl add_user admin ${admin_pass} &amp;&amp; echo "${admin_pass}" &gt; /opt/rocks/etc/rabbitmq-admin.conf
        /usr/sbin/rabbitmqctl set_user_tags admin administrator
        /usr/sbin/rabbitmqctl delete_user guest
<file name="/etc/rc.d/rocksconfig.d/post-99-restart-rabbitmq-config" perms="755">
#!/bin/bash
#
for i in `seq 1 6`; # wait for rabbitmq apps configs for 1 minute
    do
        for conf in $( ls /opt/rocks/etc | grep rabbitmq_ ); do
                app_id=${conf#rabbitmq_}
                app_id=${app_id%.conf}
                if ! rabbitmqctl list_vhosts | grep -q "^${app_id}$" ; then
                    pass=`cat /opt/rocks/etc/${conf}`
                    /usr/sbin/rabbitmqctl add_user ${app_id} ${pass}
                    /usr/sbin/rabbitmqctl add_vhost ${app_id}
                    /usr/sbin/rabbitmqctl set_permissions -p ${app_id} ${app_id} ".*" ".*" ".*"
                    /usr/sbin/rabbitmqctl set_permissions -p ${app_id} admin ".*" ".*" ".*"
                fi
        done
        sleep 10;
    done 
rm /etc/rc.d/rocksconfig.d/post-99-restart-rabbitmq-config
</file>
</post>


</kickstart>
